@h {
@class PKTokenizer;
@class TDTemplateEngine;
}

@interface {
+ (PKTokenizer *)tokenizer;

@property (nonatomic, assign) TDTemplateEngine *engine; // weakref
@property (nonatomic, assign) BOOL doLoopExpr;
}

@m {
#import <TDTemplateEngine/TDTemplateEngine.h>
#import <TDTemplateEngine/XPBooleanValue.h>
#import <TDTemplateEngine/XPNumericValue.h>
#import <TDTemplateEngine/XPStringValue.h>
#import <TDTemplateEngine/XPNegationExpression.h>
#import <TDTemplateEngine/XPBooleanExpression.h>
#import <TDTemplateEngine/XPRelationalExpression.h>
#import <TDTemplateEngine/XPArithmeticExpression.h>
#import <TDTemplateEngine/XPLoopExpression.h>
#import <TDTemplateEngine/XPCollectionExpression.h>
#import <TDTemplateEngine/XPRangeExpression.h>
#import <TDTemplateEngine/XPPathExpression.h>
#import <TDTemplateEngine/XPFilterExpression.h>
}

@extension {
@property (nonatomic, retain) PKToken *openParen;
@property (nonatomic, retain) PKToken *minus;
@property (nonatomic, assign) BOOL negation;
@property (nonatomic, assign) BOOL negative;
}

@implementation {
+ (PKTokenizer *)tokenizer {
    PKTokenizer *t = [PKTokenizer tokenizer];
    [t.symbolState add:@"=="];
    [t.symbolState add:@"!="];
    [t.symbolState add:@"<="];
    [t.symbolState add:@">="];
    [t.symbolState add:@"&&"];
    [t.symbolState add:@"||"];
    
    [t setTokenizerState:t.symbolState from:'-' to:'-'];
	[t.wordState setWordChars:NO from:'\\'' to:'\\''];
    return t;
\}

}

@init {
    self.tokenizer = [[self class] tokenizer];
    self.openParen = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"(" doubleValue:0.0];
    self.minus = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"-" doubleValue:0.0];
}

@dealloc {
    self.engine = nil;
    self.openParen = nil;
    self.minus = nil;
}

expr    = loopExpr | orExpr;

loopExpr 
		= identifiers 'in'! enumExpr {
	id enumExpr = POP();
	id vars = POP();
	PUSH([XPLoopExpression loopExpressionWithVariables:vars enumeration:enumExpr]);
};
identifiers
@before { PUSH(_openParen); }
		= identifier (','! identifier)? {
	id strs = REV(ABOVE(_openParen));
	POP(); // discard `(`
	PUSH(strs);
};
enumExpr
		= rangeExpr | collectionExpr;
		
collectionExpr = identifier {
	id var = POP_STR();
	PUSH([XPCollectionExpression collectionExpressionWithVariable:var]);
};
rangeExpr
		= unaryExpr 'to'! unaryExpr optBy {
	id by = POP();
	id stop = POP();
	id start = POP();
	PUSH([XPRangeExpression rangeExpressionWithStart:start stop:stop by:by]);
};
optBy 	= 'by'! unaryExpr
		| Empty { PUSH([XPNumericValue numericValueWithNumber:0.0]); }
		;

orOp    =  'or'! | '||'!;
orExpr  = andExpr (orOp andExpr {
    XPValue *rhs = POP();
    XPValue *lhs = POP();
    PUSH([XPBooleanExpression booleanExpressionWithOperand:lhs operator:XP_TOKEN_KIND_OR operand:rhs]);
})*;

andOp   = 'and'! | '&&'!;
andExpr = equalityExpr (andOp equalityExpr {
    XPValue *rhs = POP();
    XPValue *lhs = POP();
    PUSH([XPBooleanExpression booleanExpressionWithOperand:lhs operator:XP_TOKEN_KIND_AND operand:rhs]);
})*;

eqOp    @after { PUSH(@(XP_TOKEN_KIND_EQ)); }
        =  '=='! | 'eq'!;
neOp    @after { PUSH(@(XP_TOKEN_KIND_NE)); }
        = '!='! | 'ne'!;
equalityExpr = relationalExpr ((eqOp | neOp) relationalExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPRelationalExpression relationalExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

ltOp    @after { PUSH(@(XP_TOKEN_KIND_LT)); }
        =  '<'! | 'lt'!;
gtOp    @after { PUSH(@(XP_TOKEN_KIND_GT)); }
        =  '>'! | 'gt'!;
leOp    @after { PUSH(@(XP_TOKEN_KIND_LE)); }
        = '<='! | 'le'!;
geOp    @after { PUSH(@(XP_TOKEN_KIND_GE)); }
        = '>='! | 'ge'!;
relationalExpr = additiveExpr ((ltOp | gtOp | leOp | geOp) additiveExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPRelationalExpression relationalExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

plus    @after { PUSH(@(XP_TOKEN_KIND_PLUS)); }
        = '+'!;
minus   @after { PUSH(@(XP_TOKEN_KIND_MINUS)); }
        = '-'!;
additiveExpr = multiplicativeExpr ((plus | minus) multiplicativeExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPArithmeticExpression arithmeticExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

times   @after { PUSH(@(XP_TOKEN_KIND_TIMES)); }
        = '*'!;
div     @after { PUSH(@(XP_TOKEN_KIND_DIV)); }
        = '/'!;
mod     @after { PUSH(@(XP_TOKEN_KIND_MOD)); }
        = '%'!;
multiplicativeExpr = unaryExpr ((times | div | mod) unaryExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPArithmeticExpression arithmeticExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

unaryExpr 
	= negatedUnary
	| unary
	;
	
negatedUnary 
@before { _negation = NO; }
@after {
    if (_negation)
		PUSH([XPNegationExpression negationExpressionWithExpression:POP()]);
}
	= (('not'! | '!'!) { _negation = !_negation; })+ unary {
};

unary = signedFilterExpr | filterExpr;
signedFilterExpr 
@before {
    _negative = NO; 
}
@after {
    double d = POP_DOUBLE();
    d = (_negative) ? -d : d;
    PUSH([XPNumericValue numericValueWithNumber:d]);
}
    = ('-'! { _negative = !_negative; })+ filterExpr;
	
filterExpr 
	= primaryExpr (filter {
	NSArray *args = POP();
	NSString *filterName = POP_STR();
	id expr = POP();
	PUSH([XPFilterExpression filterExpressionWithExpression:expr filterName:filterName arguments:args]);
})?;

filter = '|'! Word filterArg;
filterArg 
	= ':'! QuotedString { PUSH(@[POP_QUOTED_STR()]); }
	| Empty { PUSH(@[]); }
	;

primaryExpr = atom | subExpr;

subExpr
    = '(' expr ')'! {
    id objs = ABOVE(_openParen);
    POP(); // discard `(`
    PUSH_ALL(REV(objs));
};

atom = literal | pathExpr;

pathExpr
@before {
    PUSH(_openParen);
}
@after {
    id toks = REV(ABOVE(_openParen));
    POP(); // discard `_openParen`
    PUSH([XPPathExpression pathExpressionWithSteps:toks]);
}
    = identifier ('.'! step)*;

step = identifier | num;
identifier = Word { PUSH(POP_STR()); };

literal = str | num | bool;
bool
    = true { PUSH([XPBooleanValue booleanValueWithBoolean:YES]); }
    | false { PUSH([XPBooleanValue booleanValueWithBoolean:NO]); }
    ;

true = 'true'! | 'YES'!;
false = 'false'! | 'NO'!;

num = Number {
    PUSH([XPNumericValue numericValueWithNumber:POP_DOUBLE()]);
};

str = QuotedString {
    PUSH([XPStringValue stringValueWithString:POP_QUOTED_STR()]);
};
