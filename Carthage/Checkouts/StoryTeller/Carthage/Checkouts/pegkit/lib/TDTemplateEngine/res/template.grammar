@h {
@class TDTemplateEngine;
@class TDTemplateContext;
}

@interface {
@property (nonatomic, assign) TDTemplateEngine *engine; // weakref
@property (nonatomic, retain) TDTemplateContext *staticContext;
}

@m {
#import <TDTemplateEngine/TDTemplateEngine.h>
#import <TDTemplateEngine/TDTemplateContext.h>
#import "TDRootNode.h"
#import "TDPrintNode.h"
#import "TDTextNode.h"
#import "TDTag.h"

@interface TDTemplateEngine ()
- (TDPrintNode *)printNodeFromFragment:(PKToken *)frag withParent:(TDNode *)parent;
- (TDTag *)tagFromFragment:(PKToken *)tok withParent:(TDNode *)parent;
@end

@interface TDTag ()
@property (nonatomic, retain) PKToken *endTagToken;
@end
}

@extension {
@property (nonatomic, assign) TDNode *currentParent; // weakref
}

@dealloc {
    self.engine = nil;
    self.staticContext = nil;
    self.currentParent = nil;
}

template
@before {
    TDAssert(_staticContext);
    TDNode *root = [TDRootNode rootNodeWithStaticContext:_staticContext];
    self.assembly.target = root;
    self.currentParent = root;
}
    = content+
    ;
    
content
    = print
    | empty_tag
    | block_tag 
    | text
    ;

print 
    = 'print' {
    PKToken *tok = POP();
    ASSERT(_engine);
    TDNode *printNode = [_engine printNodeFromFragment:tok withParent:_currentParent];
    ASSERT(printNode);
    [_currentParent addChild:printNode];
};

empty_tag
    = 'empty_tag' {
    PKToken *tok = POP();
    ASSERT(_engine);
    TDTag *startTagNode = [_engine tagFromFragment:tok withParent:_currentParent];
    ASSERT(startTagNode);
    [_currentParent addChild:startTagNode];
    //self.currentParent = startTagNode;
};

block_tag
@before { PUSH(_currentParent); }
@after { self.currentParent = POP(); }
    = block_start_tag content* block_end_tag 
    ;

block_start_tag 
    = 'block_start_tag' {
    PKToken *tok = POP();
    ASSERT(_engine);
    TDTag *startTagNode = [_engine tagFromFragment:tok withParent:_currentParent];
    ASSERT(startTagNode);
    [_currentParent addChild:startTagNode];
    self.currentParent = startTagNode;
};

block_end_tag
    = 'block_end_tag' {
    PKToken *tok = POP();
    NSString *tagName = [tok.stringValue substringFromIndex:[TDTemplateEngineTagEndPrefix length]];
    while (![_currentParent.tagName isEqualToString:tagName])
        self.currentParent = POP();

    ASSERT([_currentParent.tagName isEqualToString:tagName]);
    ASSERT([_currentParent isKindOfClass:[TDTag class]]);
    TDTag *startNode = (id)_currentParent;
    startNode.endTagToken = tok;
};

text 
    = 'text' {
    PKToken *tok = POP();
    TDNode *txtNode = [TDTextNode nodeWithToken:tok parent:_currentParent];
    [_currentParent addChild:txtNode];
};
