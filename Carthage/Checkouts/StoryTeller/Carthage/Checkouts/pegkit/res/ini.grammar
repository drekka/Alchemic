@extension {
@property (nonatomic, retain) NSString *currentSectionName;
@property (nonatomic, retain) NSMutableDictionary *sections;
}

@dealloc {
    self.currentSectionName = nil;
    self.sections = nil;
}

@implementation {
- (NSMutableDictionary *)tabForSection:(NSString *)sectionName {
    ASSERT(_sections);
    NSMutableDictionary *tab = _sections[sectionName];
    if (!tab) {
        tab = [NSMutableDictionary dictionary];
        _sections[sectionName] = tab;
    }
    return tab;
}
}

@before {
    self.sections = [NSMutableDictionary dictionary];
    self.currentSectionName = @"[[Default]]";
    _sections[_currentSectionName] = [NSMutableDictionary dictionary];
    
    PKTokenizer *t = self.tokenizer;
    
    [t setTokenizerState:t.symbolState from:'\n' to:'\n'];
    [t setTokenizerState:t.symbolState from:'\r' to:'\r'];

    [t.commentState addSingleLineStartMarker:@";"];
}

sections = section+;
section = header? keyVal+;
header = '[' ~']'+ ']'! nl;
keyVal = key+ '='! val+ nl;
key = ~'=';
val = ~nl;
nl = ('\n'! | '\r'!)+;