//
//  alchemic.h
//  alchemic
//
//  Created by Derek Clarkson on 11/02/2015.
//  Copyright (c) 2015 Derek Clarkson. All rights reserved.
//

@import Foundation;

#import "ALCInternal.h"
#import "ALCContext.h"

// This macros is used to do injections. The args can be any combination of
// variable names, property names or internal property variables.
#define inject(...) \
+(void) _alchemic_concat(ALCHEMIC_METHOD_PREFIX, __LINE__) { \
[Alchemic registerClass:self withInjectionPoints: __VA_ARGS__, NULL]; \
}

/**
 This macros is used to specify that this class is a singleton.
 */
#define registerSingleton() \
+(void) _alchemic_concat(ALCHEMIC_METHOD_PREFIX, registerSingleton) { \
[Alchemic registerSingleton:self]; \
}

@interface Alchemic : NSObject

/**
 Register a class as being a singleton.
 @discussion Singletons will only be instantiated once by Alchemic. Note that there is nothing to stop you from allocing them manually.
 
 @param singletonClass the class
 */
+(void) registerSingleton:(Class) singletonClass;

/**
 *  Registers injections required by the current class.
 *
 *  @param class the class whose instances are to be injected.
 *  @param injs a list of injections. They can be names of internal variables, pulic or private properties, or the internal variable generated by a property declaration.
 */
+(void) registerClass:(Class) class withInjectionPoints:(NSString *) injs, ...;

/**
 Returns the main context.
 
 @return An instance of ALCContext.
 */
+(ALCContext *) mainContext;

@end
