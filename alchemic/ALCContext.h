//
//  AlchemicContext.h
//  alchemic
//
//  Created by Derek Clarkson on 15/02/2015.
//  Copyright (c) 2015 Derek Clarkson. All rights reserved.
//

@import Foundation;

#import "ALCDependencyResolver.h"
#import "ALCInitialisationInjector.h"
#import "ALCObjectFactory.h"

@interface ALCContext : NSObject

#pragma mark - Dependencies

/**
 Injects dependencies into the passed object.
 
 @param object the object to have it's dependencies resolved.
 
 */
-(void) resolveDependencies:(id) object;

#pragma mark - Configuration

/**
 Specifies the class used to inject dependencies into the runtime. Normally this doesn't been to be changed from the default.
 @discussion By default this is AlchemicRuntimeInjector.
 */
@property (nonatomic, strong) id<ALCInitialisationInjector> runtimeInjector;

/**
 Adds an additional initialisation strategy to the built in ones. Strategies are run in reverse order from last registered through to the builtin ones.
 */
-(void) addInitialisationStrategy:(id<ALCInitialisationStrategy>) initialisationStrategy;

/**
 Adds a ALCDependencyResolver to the list of resolvers. Resolvers are checked in reverse order so the last added will be checked first.
 */
-(void) addDependencyResolver:(id<ALCDependencyResolver>) dependencyResolver;

/**
 Adds a ALCObjectFactory to the list of object factories. Factories are checked in reverse order. The last registered object factory is the one asked first for an object.
 */
-(void) addObjectFactory:(id<ALCObjectFactory>) objectFactory;

#pragma mark - Lifecycle

/**
 Called after init so that the code has time to changes setup before starting the context.
 */
-(void) start;

#pragma mark - Registration

/**
 Registers a class which will need dependencies in the future.
 
 @param class the class which will need dependencies.
 @param inj   the name of the property, variable or property variable to be injected.
 */
-(void) registerInjection:(NSString *) inj inClass:(Class) class;

/**
 Register a class as being a singleton.
 @discussion Singletons will only be instantiated once by Alchemic. Note that there is nothing to stop you from allocing them manually. Achemic will still resolve their dependencies.
 
 @param singletonClass the class
 */
-(void) registerSingleton:(Class) singletonClass;

/**
 Returns the known info for a class.
 @discussion This includes such things as the main constructor, registered dependencies, whether it's a singleton etc.
 @param forClass the class we want the info for.
 @return an instance of ALCClassInfo.
 */
-(ALCClassInfo *) infoForClass:(Class) forClass;

/**
 *  Registers injections required by the current class.
 *
 *  @param class the class whose instances are to be injected.
 *  @param injs a list of injections. They can be names of internal variables, pulic or private properties, or the internal variable generated by a property declaration.
 */
-(void) registerClass:(Class) class withInjectionPoints:(NSString *) injs, ...;

@end
