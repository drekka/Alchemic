//
//  ALCObjectBuilder.h
//  alchemic
//
//  Created by Derek Clarkson on 24/05/2015.
//  Copyright (c) 2015 Derek Clarkson. All rights reserved.
//

@import ObjectiveC;
@import Foundation;

@class ALCDependency;
@protocol ALCDependencyPostProcessor;
@class ALCMacroProcessor;
@protocol ALCValueSource;
@class ALCBuilderDependencyManager;

#import "ALCValue.h"
#import "ALCResolvable.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Builders are classes that can create objects.
 
 @discussion Classes that implement this protocol are used to create objects for injections and method arguments. They can be searched for in the model and queried for a variety of information about the object they will build if requested to.
 */
@protocol ALCBuilder <ALCResolvable, ALCValue>

/// @name Properties
#pragma mark - Properties

/**
 The value. Writable in builders.
 */
@property (nonatomic, strong) id value;

/**
 The class of the value that will be returned by the builder.

 @discussion This is mainly used when Alchemic is searching the model to find builders that can create an instance of a specific class or potocol.
 */
@property (nonatomic, strong, readonly) Class valueClass;


/// The name assocated with this builder. This is used when a ALCModelSearchExpression is generated by the `AcName(...)` macro.
@property (nonatomic, strong, readonly) NSString *name;

/// If the builder is to be regarded as a primary builder.
@property (nonatomic, assign, readonly) BOOL primary;

#pragma mark - Configuring

/// @name Configuring

/**
 The macro processor which will be used by the builder to process macro arguments.
 
 @discussion The builder will create this object internally so that it is configured correctly for the builders requirements in terms of what macros it will accept.
*/
@property (nonatomic, strong, readonly) ALCMacroProcessor *macroProcessor;

/**
 This is called after the builders macroProcessor has been populated with macros. 
 
 @discussion It's job is to finish the configuartion of the builder based on what the macroProcessor has been passed.
 */
-(void) configure;

@end

NS_ASSUME_NONNULL_END