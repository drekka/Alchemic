//
//  ALCObjectBuilder.h
//  alchemic
//
//  Created by Derek Clarkson on 24/05/2015.
//  Copyright (c) 2015 Derek Clarkson. All rights reserved.
//

@class ALCDependency;
@protocol ALCDependencyPostProcessor;
@class ALCMacroProcessor;
#import "ALCResolvable.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Builders are classes that can create objects.
 
 @discussion Classes that implement this protocol are used to create objects for injections and method arguments. They can be searched for in the model and queried for a variety of information about the object they will build if requested to.
 */
@protocol ALCBuilder <NSObject, ALCResolvable>

#pragma mark - Settings

/// @name Properties

/// The class of the object that this builder will create. This is the most used property as other classes will query it when deciding if this builder is appropriate for their needs.
@property (nonatomic, strong, readonly) Class valueClass;

/// The name assocated with this builder. This is used when a ALCModelSearchExpression is generated by the `AcName(...)` macro.
@property (nonatomic, strong) NSString *name;

/**
 Indicates if the builder should create an instance during Alchemic's startup processing.

 @discussion Any `AcRegister(...)` or `AcInitializer(...)` macro can set this to YES. But only if there is no `AcIsFactory` macro. When queried, it will return YES if the builder does not represent a factory and there is not already a value in the builders object cache. Otherwise NO.
 */
@property (nonatomic, assign, readonly) BOOL createOnBoot;

/// If the builder is to be regarded as a primary builder.
@property (nonatomic, assign, readonly) BOOL primary;

/// If the builder is a factory, creating objects each time it is asked for a value.
@property (nonatomic, assign, readonly) BOOL factory;

#pragma mark - Configuring

/// @name Configuring

/**
 The macro processor which will be used by the builder to process macro arguments.
 
 @discussion The builder will create this object internally so that it is configured correctly for the builders requirements in terms of what macros it will accept.
*/
@property (nonatomic, strong, readonly) ALCMacroProcessor *macroProcessor;

/**
 This is called after the builders macroProcessor has been populated with macros. 
 
 @discussion It's job is to finish the configuartion of the builder based on what the macroProcessor has been passed.
 */
-(void) configure;

/// @name Getting objects

/**
 Creates the object and puts it into the value cache if this is not a factory builder.

 @discussion This does not trigger dependency injection. Use the value property to obtain an object that has been fully injected. This method is public because Alchemic's startup process is split process where objects are created first and injected second.
 
 @return An instance of the valueType property that does not have it's dependencies injected.
 @see value
 */
-(id) instantiate;

/**
 Used to inject dependencies after the value has been created or to populate dependencies in an object not created by Alchemic.

 @discussion This is used in the second stage of Alchemics startup processor where each object that was created by the first stage now has it's dependencies injected. It is also called from [ALCContext injectDependencies:] when an object needs injection but has not been created by Alchemic.
 
 @param value The object which needs dependencies injected.
 */
-(void) injectValueDependencies:(id) value;

/**
 Returns a "ready-to-go" object, injected with any dependencies it needs.
 
 @discussion This is the main property that should be access to obtain objects once Alchemic has started.
 @return An instance of valueClass fully instantiated and injected.
 */
@property (nonatomic, strong) id value;

@end

NS_ASSUME_NONNULL_END