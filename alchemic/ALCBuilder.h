//
//  ALCObjectBuilder.h
//  alchemic
//
//  Created by Derek Clarkson on 23/08/2015.
//  Copyright Â© 2015 Derek Clarkson. All rights reserved.
//

@import Foundation;
@import ObjectiveC;

#import "ALCAbstractResolvable.h"
#import "ALCValue.h"
#import "ALCInternalMacros.h"
#import "ALCBuilderType.h"

@protocol ALCBuilderStorage;
@class ALCMacroProcessor;
@class ALCValueSourceFactory;

NS_ASSUME_NONNULL_BEGIN

/**
 Class which builds objects and manages all their inter-dependencies.

 @discussion This class uses a variety of strategy classes to enact the functionality it provides.
 */

@interface ALCBuilder : ALCAbstractResolvable<ALCValue>

#pragma mark - Properties

@property (nonatomic, assign, readonly) ALCBuilderType type;

/**
 Override of value so it can be writable in builders.
 */
@property (nonatomic, strong) id value;

/// The name assocated with this builder. This is used when a ALCModelSearchExpression is generated by the `AcName(...)` macro.
@property (nonatomic, strong, readonly) NSString *name;

/// If the builder is to be regarded as a primary builder.
@property (nonatomic, assign, readonly) BOOL primary;

/**
 The macro processor which will be used by the builder to process macro arguments.

 @discussion The builder will create this object internally so that it is configured correctly for the builders requirements in terms of what macros it will accept.
 */
@property (nonatomic, strong, readonly) ALCMacroProcessor *macroProcessor;

#pragma mark - Initializers

hideInitializer(init);

/**
 default initializer.

 @param builderType An instance of ALCBuilderType which provides the functility which defines what type of builder this is.
 @param forClass    The class of the object that the builder will create.

 @return An instance of a ALCBuilder.
 */

-(instancetype) initWithALCBuilderType:(id<ALCBuilderType>) builderType
                           forClass:(Class) aClass NS_DESIGNATED_INITIALIZER;

#pragma mark - Tasks

-(void) addVariableInjection:(Ivar) variable
          valueSourceFactory:(ALCValueSourceFactory *) valueSourceFactory;

/**
 Call to directory access the builder using a custom set of values.

 @param arguments An NSarray of the values matching the methods arguments.

 @return The return object from the method with all dependencies injected.
 */
-(id) invokeWithArgs:(NSArray<id> *) arguments;

/**
 This must be called after the builders macroProcessor has been populated with macros.

 @discussion It's job is to finish the configuartion of the builder based on what the macroProcessor has been passed.
 */
-(void) configure;

/**
 Injects an object passed to the builder.

 @param object The object which needs dependencies injected.
 */
-(void)injectDependencies:(id) object;

@end

NS_ASSUME_NONNULL_END