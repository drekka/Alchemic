//
//  ALCObjectBuilder.h
//  alchemic
//
//  Created by Derek Clarkson on 24/05/2015.
//  Copyright (c) 2015 Derek Clarkson. All rights reserved.
//

@class ALCDependency;
@protocol ALCDependencyPostProcessor;
@class ALCMacroProcessor;
#import "ALCResolvable.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Builders are classes that can create objects.
 
 @discussion Classes that implement this protocol are used to create objects for injections and method arguments. They can be searched for in the model and queried for a variety of information about the object they will build if requested to.
 */
@protocol ALCBuilder <ALCResolvable>

#pragma mark - Overridden properties

/**
 The value. Writable in builders.
 */
@property (nonatomic, strong) id value;

/**
 The class of the value that will be returned by the builder.

 @discussion This is mainly used when Alchemic is searching the model to find builders that can create an instance of a specific class or potocol.
 */
@property (nonatomic, strong) Class valueClass;

#pragma mark - Settings

/// @name Properties

/// The name assocated with this builder. This is used when a ALCModelSearchExpression is generated by the `AcName(...)` macro.
@property (nonatomic, strong) NSString *name;

/**
 Indicates if the builder should create an instance during Alchemic's startup processing.

 @discussion Alchemic's startup process needs to check this so it knows whether or not to create an instance of an object as a singleton. By default this is NO. Any `AcRegister(...)` or `AcInitializer(...)` macro can set this to YES if not registering a factory. When queried, it will return YES if the builder does not represent a factory and there isn't a value in the builders object cache. Otherwise NO.
 */
@property (nonatomic, assign, readonly) BOOL createOnBoot;

/// If the builder is to be regarded as a primary builder.
@property (nonatomic, assign, readonly) BOOL primary;

/// If the builder is a factory, creating objects each time it is asked for a value.
@property (nonatomic, assign, readonly) BOOL factory;

#pragma mark - Configuring

/// @name Configuring

/**
 The macro processor which will be used by the builder to process macro arguments.
 
 @discussion The builder will create this object internally so that it is configured correctly for the builders requirements in terms of what macros it will accept.
*/
@property (nonatomic, strong, readonly) ALCMacroProcessor *macroProcessor;

/**
 This is called after the builders macroProcessor has been populated with macros. 
 
 @discussion It's job is to finish the configuartion of the builder based on what the macroProcessor has been passed.
 */
-(void) configure;

#pragma mark - Lifecycle

/// @name Lifecycle

/**
 Creates the object and puts it into the value cache if this is not a factory builder.

 @discussion This does not trigger dependency injection. Use the value property to obtain an object that has been fully injected. This method is public because Alchemic's startup process is split process where objects are created first and injected second.
 
 @return An instance of the valueType property that does not have it's dependencies injected.
 @see value
 */
-(id) instantiate;

/**
 Used to inject dependencies after the value has been created or to populate dependencies in an object not created by Alchemic.

 @param value The object which needs dependencies injected.
 */
-(void)injectDependencies:(id) value;

@end

NS_ASSUME_NONNULL_END